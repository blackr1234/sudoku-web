{"version":3,"sources":["components/SudokuConfigForm/index.js","components/SudokuActionSection/index.js","components/DigitCell/index.js","utils/CombinationUtils.js","components/Sudoku/index.js","App.js","index.js"],"names":["SudokuConfigForm","props","configData","setConfigData","handleClick","e","target","name","checked","FormGroup","row","FormControlLabel","control","Switch","answerMode","onChange","color","label","solveItself","SudokuActionSection","clearQuestionAction","clearAnswerAction","style","display","margin","verticalAlign","ButtonGroup","orientation","Button","variant","onClick","DigitCell","children","selected","answer","highlighted","rest","className","addCombosForNewItem","item","template","itemsToAdd","map","i","length","functions","powerSet","list","result","initValue","Sudoku","useState","sudokuQuestionCellValues","setSudokuQuestionCellValues","JSON","parse","stringify","sudokuAnswerCellValues","setSudokuAnswerCellValues","o","Array","fill","sudokuPossibleAnswerCellValues","setSudokuPossibleAnswerCellValues","selectedRow","setselectedRow","selectedCol","setselectedCol","useEffect","solveAction","col","getNewMultiDimensionalArrayWithUpdatedValue","mdArr","newValue","dimensions","updateMultiDimensionalArray","arrRef","removeValuesInMultiDimensionalArray","valuesToRemove","filter","includes","getNonetIndexByRowCol","Math","floor","getNonetIndexByColChunk","chunk","getNonetIndexByRowChunk","getRowCellValuesByRow","sudoku2DArray","getRowOtherCellValuesByRowCol","v","c","getRowOtherCellValuesByRowChunk","getRowOtherCellValuesByColChunk","rowArr","r","getCellValuesCol","getColOtherCellValuesByRowCol","getNonetOtherCellValuesByRowChunk","flatMap","colCell","undefined","getNonetOtherCellValuesByColChunk","getNonetOtherCellValuesByRowCol","getPossibleAnswerValuesByRowChunk","sudokuPossibleAnswerValues","chunkIndex","from","Set","getPossibleAnswerValuesByColChunk","getRowPossibleAnswerValuesByRow","possibleAnswers","getColPossibleAnswerValuesByCol","rowCell","getNonetPossibleAnswerValuesByNonetIndex","nonet","newSudokuPossibleAnswerValues","otherCellValuesRow","otherCellValuesCol","otherCellValuesNonet","possibleValuesToRemove","nonetOtherCellValues","rowOtherChunkCellValues","rowChunkAnswerPossibleValues","colOtherChunkCellValues","colChunkAnswerPossibleValues","num","rowChunkValues","colChunkValues","nonetPossibleAnswerValues","possible","numPossibleAnswers","eliminateOtherCellPossibleValuesWithCombinations","possibleAnswerValues","combinations","CombinationUtils","combination","otherCell","some","id","position","top","left","zIndex","fontSize","fontWeight","join","j","App","padding","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ee0134c.chunk.js","sourcesContent":["import FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\n\r\nfunction SudokuConfigForm(props) {\r\n\tconst { configData, setConfigData } = props;\r\n\r\n\tconst handleClick = (e) => {\r\n\t\tsetConfigData({\r\n\t\t\t...configData,\r\n\t\t\t[e.target.name]: e.target.checked,\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<FormGroup row>\r\n\t\t\t<FormControlLabel\r\n\t\t\t\tcontrol={\r\n\t\t\t\t\t<Switch checked={configData.answerMode} onChange={handleClick} name=\"answerMode\" color=\"primary\" />\r\n\t\t\t\t}\r\n\t\t\t\tlabel=\"Answer Mode\"\r\n\t\t\t/>\r\n\t\t\t<FormControlLabel\r\n\t\t\t\tcontrol={\r\n\t\t\t\t\t<Switch\r\n\t\t\t\t\t\tchecked={configData.solveItself}\r\n\t\t\t\t\t\tonChange={handleClick}\r\n\t\t\t\t\t\tname=\"solveItself\"\r\n\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\t\t\t\tlabel=\"Solve Itself\"\r\n\t\t\t/>\r\n\t\t</FormGroup>\r\n\t);\r\n}\r\n\r\nexport default SudokuConfigForm;\r\nexport { SudokuConfigForm };\r\n","import { ButtonGroup } from \"@material-ui/core\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nfunction SudokuActionSection(props) {\r\n\tconst { clearQuestionAction, clearAnswerAction } = props;\r\n\r\n\treturn (\r\n\t\t<div style={{ display: \"inline-block\", margin: \"1em\", verticalAlign: \"top\" }}>\r\n\t\t\t<ButtonGroup orientation=\"vertical\">\r\n\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={() => clearQuestionAction()}>\r\n\t\t\t\t\tClear Q\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={() => clearAnswerAction()}>\r\n\t\t\t\t\tClear A\r\n\t\t\t\t</Button>\r\n\t\t\t</ButtonGroup>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SudokuActionSection;\r\nexport { SudokuActionSection };\r\n","import \"./index.css\";\r\n\r\nfunction DigitCell(props) {\r\n\tconst { children, selected, answer, highlighted, ...rest } = props;\r\n\r\n\treturn (\r\n\t\t<td\r\n\t\t\tclassName={`${\r\n\t\t\t\tselected ? \"digit-cell-selected\" : highlighted ? \"digit-cell-highlighted\" : \"digit-cell-normal\"\r\n\t\t\t} ${answer ? \"digit-cell-answer\" : \"\"}`}\r\n\t\t\t{...rest}\r\n\t\t>\r\n\t\t\t{children}\r\n\t\t</td>\r\n\t);\r\n}\r\n\r\nexport default DigitCell;\r\nexport { DigitCell };\r\n","function addCombosForNewItem(item, template) {\r\n\tconst itemsToAdd = template.map(function (i) {\r\n\t\treturn [...(i.length ? i : [i]), item];\r\n\t});\r\n\r\n\treturn [...template, [item], ...itemsToAdd];\r\n}\r\n\r\nfunction powerSet(list) {\r\n\tlet result = [];\r\n\r\n\tfor (const item of list) {\r\n\t\tresult = addCombosForNewItem(item, result);\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\nconst functions = {\r\n\tpowerSet,\r\n};\r\nexport default functions;\r\nexport { powerSet };\r\n","import { useState, useEffect } from \"react\";\r\nimport \"./index.css\";\r\nimport { SudokuConfigForm } from \"../SudokuConfigForm\";\r\nimport { SudokuActionSection } from \"../SudokuActionSection\";\r\nimport { DigitCell } from \"../DigitCell\";\r\nimport chunk from \"lodash/chunk\";\r\nimport { CombinationUtils } from \"../../utils\";\r\n\r\nconst initValue = [\r\n\t[3, null, null, null, 6, null, null, null, 4],\r\n\t[null, 9, null, null, 2, null, null, 1, null],\r\n\t[null, null, 2, null, null, null, 8, null, null],\r\n\t[null, null, null, 8, null, 2, null, null, null],\r\n\t[4, 5, null, null, null, null, null, 3, 7],\r\n\t[null, null, null, 3, null, 5, null, null, null],\r\n\t[null, null, 5, null, null, null, 7, null, null],\r\n\t[null, 1, null, null, 3, null, null, 9, null],\r\n\t[7, null, null, null, 1, null, null, null, 2],\r\n];\r\n\r\n// Array(9)\r\n// \t.fill(null)\r\n// \t.map((e, i) => Array(9).fill(null));\r\n\r\nfunction Sudoku(props) {\r\n\tconst [configData, setConfigData] = useState({\r\n\t\tanswerMode: false,\r\n\t\tsolveItself: false,\r\n\t});\r\n\tconst [sudokuQuestionCellValues, setSudokuQuestionCellValues] = useState(initValue);\r\n\tconst [sudokuAnswerCellValues, setSudokuAnswerCellValues] = useState(JSON.parse(JSON.stringify(initValue)));\r\n\tconst [sudokuPossibleAnswerCellValues, setSudokuPossibleAnswerCellValues] = useState(\r\n\t\tJSON.parse(JSON.stringify(initValue)).map((e) =>\r\n\t\t\te.map((o) =>\r\n\t\t\t\to\r\n\t\t\t\t\t? []\r\n\t\t\t\t\t: Array(9)\r\n\t\t\t\t\t\t\t.fill(null)\r\n\t\t\t\t\t\t\t.map((e, i) => i + 1)\r\n\t\t\t)\r\n\t\t)\r\n\t);\r\n\tconst [selectedRow, setselectedRow] = useState(0);\r\n\tconst [selectedCol, setselectedCol] = useState(0);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetSudokuPossibleAnswerCellValues(\r\n\t\t\tJSON.parse(JSON.stringify(sudokuQuestionCellValues)).map((e) =>\r\n\t\t\t\te.map((o) =>\r\n\t\t\t\t\to\r\n\t\t\t\t\t\t? []\r\n\t\t\t\t\t\t: Array(9)\r\n\t\t\t\t\t\t\t\t.fill(null)\r\n\t\t\t\t\t\t\t\t.map((e, i) => i + 1)\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t);\r\n\t}, [configData.solveItself, sudokuQuestionCellValues]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (configData.solveItself) {\r\n\t\t\tsolveAction();\r\n\t\t}\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, [configData.solveItself, sudokuAnswerCellValues]);\r\n\r\n\tuseEffect(() => {\r\n\t\tfor (let row = 0; row < 9; row++) {\r\n\t\t\tfor (let col = 0; col < 9; col++) {\r\n\t\t\t\tif (sudokuPossibleAnswerCellValues[row][col].length === 1) {\r\n\t\t\t\t\tsetSudokuAnswerCellValues(\r\n\t\t\t\t\t\tgetNewMultiDimensionalArrayWithUpdatedValue(\r\n\t\t\t\t\t\t\tsudokuAnswerCellValues,\r\n\t\t\t\t\t\t\tsudokuPossibleAnswerCellValues[row][col][0],\r\n\t\t\t\t\t\t\trow,\r\n\t\t\t\t\t\t\tcol\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, [sudokuPossibleAnswerCellValues]);\r\n\r\n\tconst getNewMultiDimensionalArrayWithUpdatedValue = (mdArr, newValue, ...dimensions) =>\r\n\t\tupdateMultiDimensionalArray(JSON.parse(JSON.stringify(mdArr)), newValue, ...dimensions);\r\n\r\n\tconst updateMultiDimensionalArray = (mdArr, newValue, ...dimensions) => {\r\n\t\tlet arrRef = mdArr;\r\n\t\tfor (let i = 0; i < dimensions.length - 1; i++) {\r\n\t\t\tarrRef = arrRef[dimensions[i]];\r\n\t\t}\r\n\t\tarrRef[dimensions[dimensions.length - 1]] = newValue;\r\n\r\n\t\treturn mdArr;\r\n\t};\r\n\r\n\tconst removeValuesInMultiDimensionalArray = (mdArr, valuesToRemove, ...dimensions) => {\r\n\t\tlet arrRef = mdArr;\r\n\t\tfor (let i = 0; i < dimensions.length - 1; i++) {\r\n\t\t\tarrRef = arrRef[dimensions[i]];\r\n\t\t}\r\n\t\tarrRef[dimensions[dimensions.length - 1]] = arrRef[dimensions[dimensions.length - 1]].filter(\r\n\t\t\t(e) => !valuesToRemove.includes(e)\r\n\t\t);\r\n\r\n\t\treturn mdArr;\r\n\t};\r\n\r\n\tconst getNonetIndexByRowCol = (row, col) => Math.floor(row / 3) * 3 + Math.floor(col / 3);\r\n\tconst getNonetIndexByColChunk = (col, chunk) => getNonetIndexByRowCol(chunk * 3, col);\r\n\tconst getNonetIndexByRowChunk = (row, chunk) => getNonetIndexByRowCol(row, chunk * 3);\r\n\r\n\tconst getRowCellValuesByRow = (sudoku2DArray, row) => sudoku2DArray[row];\r\n\tconst getRowOtherCellValuesByRowCol = (sudoku2DArray, row, col) => sudoku2DArray[row].filter((v, c) => c !== col);\r\n\tconst getRowOtherCellValuesByRowChunk = (sudoku2DArray, row, chunk) =>\r\n\t\tsudoku2DArray[row].filter((v, c) => getNonetIndexByRowCol(row, c) !== getNonetIndexByRowChunk(row, chunk));\r\n\tconst getRowOtherCellValuesByColChunk = (sudoku2DArray, col, chunk) =>\r\n\t\tsudoku2DArray\r\n\t\t\t.map((rowArr) => rowArr[col])\r\n\t\t\t.filter((v, r) => getNonetIndexByRowCol(r, col) !== getNonetIndexByColChunk(col, chunk));\r\n\r\n\tconst getCellValuesCol = (sudoku2DArray, col) => sudoku2DArray.map((rowArr) => rowArr[col]);\r\n\tconst getColOtherCellValuesByRowCol = (sudoku2DArray, row, col) =>\r\n\t\tsudoku2DArray.map((rowArr) => rowArr[col]).filter((v, i) => i !== row);\r\n\r\n\tconst getNonetOtherCellValuesByRowChunk = (sudoku2DArray, row, chunk) =>\r\n\t\tsudoku2DArray.flatMap((rowArr, r) =>\r\n\t\t\trowArr\r\n\t\t\t\t.map((colCell, c) =>\r\n\t\t\t\t\tgetNonetIndexByRowCol(r, c) !== getNonetIndexByRowChunk(row, chunk)\r\n\t\t\t\t\t\t? undefined\r\n\t\t\t\t\t\t: r !== row\r\n\t\t\t\t\t\t? colCell\r\n\t\t\t\t\t\t: null\r\n\t\t\t\t)\r\n\t\t\t\t.filter((e) => e !== undefined)\r\n\t\t);\r\n\tconst getNonetOtherCellValuesByColChunk = (sudoku2DArray, col, chunk) =>\r\n\t\tsudoku2DArray.flatMap((rowArr, r) =>\r\n\t\t\trowArr\r\n\t\t\t\t.map((colCell, c) =>\r\n\t\t\t\t\tgetNonetIndexByRowCol(r, c) !== getNonetIndexByColChunk(col, chunk)\r\n\t\t\t\t\t\t? undefined\r\n\t\t\t\t\t\t: c !== col\r\n\t\t\t\t\t\t? colCell\r\n\t\t\t\t\t\t: null\r\n\t\t\t\t)\r\n\t\t\t\t.filter((e) => e !== undefined)\r\n\t\t);\r\n\tconst getNonetOtherCellValuesByRowCol = (sudoku2DArray, row, col) =>\r\n\t\tsudoku2DArray.flatMap((rowArr, r) =>\r\n\t\t\trowArr\r\n\t\t\t\t.map((colCell, c) =>\r\n\t\t\t\t\tgetNonetIndexByRowCol(r, c) !== getNonetIndexByRowCol(row, col)\r\n\t\t\t\t\t\t? undefined\r\n\t\t\t\t\t\t: r !== row || c !== col\r\n\t\t\t\t\t\t? colCell\r\n\t\t\t\t\t\t: null\r\n\t\t\t\t)\r\n\t\t\t\t.filter((e) => e !== undefined)\r\n\t\t);\r\n\r\n\tconst getPossibleAnswerValuesByRowChunk = (sudokuPossibleAnswerValues, row, chunkIndex) =>\r\n\t\tArray.from(new Set(chunk(sudokuPossibleAnswerValues[row], 3)[chunkIndex].flatMap((e) => e)));\r\n\tconst getPossibleAnswerValuesByColChunk = (sudokuPossibleAnswerValues, col, chunkIndex) =>\r\n\t\tArray.from(\r\n\t\t\tnew Set(\r\n\t\t\t\tchunk(\r\n\t\t\t\t\tsudokuPossibleAnswerValues.map((rowArr) => rowArr[col]),\r\n\t\t\t\t\t3\r\n\t\t\t\t)[chunkIndex].flatMap((e) => e)\r\n\t\t\t)\r\n\t\t);\r\n\tconst getRowPossibleAnswerValuesByRow = (sudokuPossibleAnswerValues, row) =>\r\n\t\tsudokuPossibleAnswerValues[row].map((colCell, c) => ({ possibleAnswers: colCell, row, col: c }));\r\n\tconst getColPossibleAnswerValuesByCol = (sudokuPossibleAnswerValues, col) =>\r\n\t\tsudokuPossibleAnswerValues\r\n\t\t\t.map((rowArr, r) => rowArr[col])\r\n\t\t\t.map((rowCell, r) => ({ possibleAnswers: rowCell, row: r, col }));\r\n\tconst getNonetPossibleAnswerValuesByNonetIndex = (sudokuPossibleAnswerValues, nonet) =>\r\n\t\tsudokuPossibleAnswerValues.flatMap((rowArr, r) =>\r\n\t\t\trowArr\r\n\t\t\t\t.map((colCell, c) =>\r\n\t\t\t\t\tgetNonetIndexByRowCol(r, c) === nonet ? { possibleAnswers: colCell, row: r, col: c } : null\r\n\t\t\t\t)\r\n\t\t\t\t.filter((e) => e)\r\n\t\t);\r\n\r\n\tconst clearQuestionAction = () => {\r\n\t\tsetSudokuQuestionCellValues(\r\n\t\t\tArray(9)\r\n\t\t\t\t.fill(null)\r\n\t\t\t\t.map((e, i) => Array(9).fill(null))\r\n\t\t);\r\n\t\tsetSudokuAnswerCellValues(\r\n\t\t\tArray(9)\r\n\t\t\t\t.fill(null)\r\n\t\t\t\t.map((e, i) => Array(9).fill(null))\r\n\t\t);\r\n\t};\r\n\tconst clearAnswerAction = () => setSudokuAnswerCellValues(JSON.parse(JSON.stringify(sudokuQuestionCellValues)));\r\n\r\n\tconst solveAction = () => {\r\n\t\tlet newSudokuPossibleAnswerValues = JSON.parse(JSON.stringify(sudokuPossibleAnswerCellValues));\r\n\r\n\t\t// eliminate possible values for empty cells if the row, col or nonet are filled with the values\r\n\t\tfor (let row = 0; row < 9; row++) {\r\n\t\t\tfor (let col = 0; col < 9; col++) {\r\n\t\t\t\tif (sudokuAnswerCellValues[row][col]) {\r\n\t\t\t\t\tnewSudokuPossibleAnswerValues = removeValuesInMultiDimensionalArray(\r\n\t\t\t\t\t\tnewSudokuPossibleAnswerValues,\r\n\t\t\t\t\t\tArray(9)\r\n\t\t\t\t\t\t\t.fill(null)\r\n\t\t\t\t\t\t\t.map((e, i) => i + 1),\r\n\t\t\t\t\t\trow,\r\n\t\t\t\t\t\tcol\r\n\t\t\t\t\t);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tconst otherCellValuesRow = getRowOtherCellValuesByRowCol(sudokuAnswerCellValues, row, col).filter(\r\n\t\t\t\t\t(e) => e\r\n\t\t\t\t);\r\n\t\t\t\tconst otherCellValuesCol = getColOtherCellValuesByRowCol(sudokuAnswerCellValues, row, col).filter(\r\n\t\t\t\t\t(e) => e\r\n\t\t\t\t);\r\n\t\t\t\tconst otherCellValuesNonet = getNonetOtherCellValuesByRowCol(sudokuAnswerCellValues, row, col).filter(\r\n\t\t\t\t\t(e) => e\r\n\t\t\t\t);\r\n\t\t\t\tconst possibleValuesToRemove = Array.from(\r\n\t\t\t\t\tnew Set([...otherCellValuesRow, ...otherCellValuesCol, ...otherCellValuesNonet])\r\n\t\t\t\t);\r\n\r\n\t\t\t\tnewSudokuPossibleAnswerValues = removeValuesInMultiDimensionalArray(\r\n\t\t\t\t\tnewSudokuPossibleAnswerValues,\r\n\t\t\t\t\tpossibleValuesToRemove,\r\n\t\t\t\t\trow,\r\n\t\t\t\t\tcol\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// if the other cells of this row chunk can fill all the blanks in other chunks of the same row,\r\n\t\t// the possible values in this row chunk can only appear in this row chunk but not other row chunks of the same row\r\n\t\tfor (let row = 0; row < 9; row++) {\r\n\t\t\tfor (let chunk = 0; chunk < 3; chunk++) {\r\n\t\t\t\tconst nonetOtherCellValues = getNonetOtherCellValuesByRowChunk(\r\n\t\t\t\t\tsudokuAnswerCellValues,\r\n\t\t\t\t\trow,\r\n\t\t\t\t\tchunk\r\n\t\t\t\t).filter((e) => e);\r\n\t\t\t\tconst rowOtherChunkCellValues = getRowOtherCellValuesByRowChunk(\r\n\t\t\t\t\tsudokuAnswerCellValues,\r\n\t\t\t\t\trow,\r\n\t\t\t\t\tchunk\r\n\t\t\t\t).filter((e) => e);\r\n\r\n\t\t\t\tconst rowChunkAnswerPossibleValues = getPossibleAnswerValuesByRowChunk(\r\n\t\t\t\t\tnewSudokuPossibleAnswerValues,\r\n\t\t\t\t\trow,\r\n\t\t\t\t\tchunk\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\tArray.from(new Set([...nonetOtherCellValues, ...rowOtherChunkCellValues])).length === 6 &&\r\n\t\t\t\t\trowChunkAnswerPossibleValues.length === 3\r\n\t\t\t\t) {\r\n\t\t\t\t\tfor (let c = 0; c < 9; c++) {\r\n\t\t\t\t\t\tif (Math.floor(c / 3) !== chunk) {\r\n\t\t\t\t\t\t\tnewSudokuPossibleAnswerValues = removeValuesInMultiDimensionalArray(\r\n\t\t\t\t\t\t\t\tnewSudokuPossibleAnswerValues,\r\n\t\t\t\t\t\t\t\tArray(9)\r\n\t\t\t\t\t\t\t\t\t.fill(null)\r\n\t\t\t\t\t\t\t\t\t.map((e, i) => i + 1)\r\n\t\t\t\t\t\t\t\t\t.filter(\r\n\t\t\t\t\t\t\t\t\t\t(v) => !nonetOtherCellValues.includes(v) && !rowOtherChunkCellValues.includes(v)\r\n\t\t\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\t\trow,\r\n\t\t\t\t\t\t\t\tc\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// if the other cells of this col chunk can fill all the blanks in other chunks of the same col,\r\n\t\t// the possible values in this col chunk can only appear in this col chunk but not other col chunks of the same col\r\n\t\tfor (let col = 0; col < 9; col++) {\r\n\t\t\tfor (let chunk = 0; chunk < 3; chunk++) {\r\n\t\t\t\tconst nonetOtherCellValues = getNonetOtherCellValuesByColChunk(\r\n\t\t\t\t\tsudokuAnswerCellValues,\r\n\t\t\t\t\tcol,\r\n\t\t\t\t\tchunk\r\n\t\t\t\t).filter((e) => e);\r\n\t\t\t\tconst colOtherChunkCellValues = getRowOtherCellValuesByColChunk(\r\n\t\t\t\t\tsudokuAnswerCellValues,\r\n\t\t\t\t\tcol,\r\n\t\t\t\t\tchunk\r\n\t\t\t\t).filter((e) => e);\r\n\r\n\t\t\t\tconst colChunkAnswerPossibleValues = getPossibleAnswerValuesByColChunk(\r\n\t\t\t\t\tnewSudokuPossibleAnswerValues,\r\n\t\t\t\t\tcol,\r\n\t\t\t\t\tchunk\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\tArray.from(new Set([...nonetOtherCellValues, ...colOtherChunkCellValues])).length === 6 &&\r\n\t\t\t\t\tcolChunkAnswerPossibleValues.length === 3\r\n\t\t\t\t) {\r\n\t\t\t\t\tfor (let r = 0; r < 9; r++) {\r\n\t\t\t\t\t\tif (Math.floor(r / 3) !== chunk) {\r\n\t\t\t\t\t\t\tnewSudokuPossibleAnswerValues = removeValuesInMultiDimensionalArray(\r\n\t\t\t\t\t\t\t\tnewSudokuPossibleAnswerValues,\r\n\t\t\t\t\t\t\t\tArray(9)\r\n\t\t\t\t\t\t\t\t\t.fill(null)\r\n\t\t\t\t\t\t\t\t\t.map((e, i) => i + 1)\r\n\t\t\t\t\t\t\t\t\t.filter(\r\n\t\t\t\t\t\t\t\t\t\t(v) => !nonetOtherCellValues.includes(v) && !colOtherChunkCellValues.includes(v)\r\n\t\t\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\t\tr,\r\n\t\t\t\t\t\t\t\tcol\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let num = 1; num <= 9; num++) {\r\n\t\t\t// if this row chunk is the only chunk of the same row that has this num as possible value,\r\n\t\t\t// other row chunks in the same nonet should not have this num as possible value\r\n\t\t\tfor (let row = 0; row < 9; row++) {\r\n\t\t\t\tconst rowChunkValues = chunk(getRowCellValuesByRow(newSudokuPossibleAnswerValues, row), 3).map((e) =>\r\n\t\t\t\t\tArray.from(new Set(e.flatMap((e) => e)))\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (rowChunkValues.filter((o) => o.includes(num)).length !== 1) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst chunkIndex = rowChunkValues.map((o, i) => (o.includes(num) ? i : null)).filter((o) => o)[0];\r\n\r\n\t\t\t\tfor (let r = 0; r < 9; r++) {\r\n\t\t\t\t\tfor (let c = 0; c < 9; c++) {\r\n\t\t\t\t\t\tif (r !== row && getNonetIndexByRowCol(r, c) === getNonetIndexByRowChunk(row, chunkIndex)) {\r\n\t\t\t\t\t\t\tnewSudokuPossibleAnswerValues = removeValuesInMultiDimensionalArray(\r\n\t\t\t\t\t\t\t\tnewSudokuPossibleAnswerValues,\r\n\t\t\t\t\t\t\t\t[num],\r\n\t\t\t\t\t\t\t\tr,\r\n\t\t\t\t\t\t\t\tc\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// if this col chunk is the only chunk of the same col that has this num as possible value,\r\n\t\t\t// other col chunks in the same nonet should not have this num as possible value\r\n\t\t\tfor (let col = 0; col < 9; col++) {\r\n\t\t\t\tconst colChunkValues = chunk(getCellValuesCol(newSudokuPossibleAnswerValues, col), 3).map((e) =>\r\n\t\t\t\t\tArray.from(new Set(e.flatMap((e) => e)))\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (colChunkValues.filter((o) => o.includes(num)).length !== 1) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst chunkIndex = colChunkValues.map((o, i) => (o.includes(num) ? i : null)).filter((o) => o)[0];\r\n\r\n\t\t\t\tfor (let r = 0; r < 9; r++) {\r\n\t\t\t\t\tfor (let c = 0; c < 9; c++) {\r\n\t\t\t\t\t\tif (c !== col && getNonetIndexByRowCol(r, c) === getNonetIndexByColChunk(col, chunkIndex)) {\r\n\t\t\t\t\t\t\tnewSudokuPossibleAnswerValues = removeValuesInMultiDimensionalArray(\r\n\t\t\t\t\t\t\t\tnewSudokuPossibleAnswerValues,\r\n\t\t\t\t\t\t\t\t[num],\r\n\t\t\t\t\t\t\t\tr,\r\n\t\t\t\t\t\t\t\tc\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let nonet = 0; nonet < 9; nonet++) {\r\n\t\t\t\tconst nonetPossibleAnswerValues = getNonetPossibleAnswerValuesByNonetIndex(\r\n\t\t\t\t\tnewSudokuPossibleAnswerValues,\r\n\t\t\t\t\tnonet\r\n\t\t\t\t)\r\n\t\t\t\t\t.map(({ possibleAnswers, row, col }) => ({\r\n\t\t\t\t\t\tpossible: possibleAnswers.includes(num),\r\n\t\t\t\t\t\trow,\r\n\t\t\t\t\t\tcol,\r\n\t\t\t\t\t}))\r\n\t\t\t\t\t.filter(({ possible }) => possible);\r\n\r\n\t\t\t\tif (!nonetPossibleAnswerValues.length || nonetPossibleAnswerValues.length > 3) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// if this row chunk is the only row chunk in the same nonet that have this num as possible value,\r\n\t\t\t\t// other chunks in the same row should not have this num as possible value\r\n\t\t\t\tif (\r\n\t\t\t\t\tnonetPossibleAnswerValues.length ===\r\n\t\t\t\t\tnonetPossibleAnswerValues.filter((e) => e.row === nonetPossibleAnswerValues[0].row).length\r\n\t\t\t\t) {\r\n\t\t\t\t\tfor (let c = 0; c < 9; c++) {\r\n\t\t\t\t\t\tif (getNonetIndexByRowCol(nonetPossibleAnswerValues[0].row, c) !== nonet) {\r\n\t\t\t\t\t\t\tnewSudokuPossibleAnswerValues = removeValuesInMultiDimensionalArray(\r\n\t\t\t\t\t\t\t\tnewSudokuPossibleAnswerValues,\r\n\t\t\t\t\t\t\t\t[num],\r\n\t\t\t\t\t\t\t\tnonetPossibleAnswerValues[0].row,\r\n\t\t\t\t\t\t\t\tc\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// if this col chunk is the only col chunk in the same nonet that have this num as possible value,\r\n\t\t\t\t// other chunks in the same col should not have this num as possible value\r\n\t\t\t\tif (\r\n\t\t\t\t\tnonetPossibleAnswerValues.length ===\r\n\t\t\t\t\tnonetPossibleAnswerValues.filter((e) => e.col === nonetPossibleAnswerValues[0].col).length\r\n\t\t\t\t) {\r\n\t\t\t\t\tfor (let r = 0; r < 9; r++) {\r\n\t\t\t\t\t\tif (getNonetIndexByRowCol(r, nonetPossibleAnswerValues[0].col) !== nonet) {\r\n\t\t\t\t\t\t\tnewSudokuPossibleAnswerValues = removeValuesInMultiDimensionalArray(\r\n\t\t\t\t\t\t\t\tnewSudokuPossibleAnswerValues,\r\n\t\t\t\t\t\t\t\t[num],\r\n\t\t\t\t\t\t\t\tr,\r\n\t\t\t\t\t\t\t\tnonetPossibleAnswerValues[0].col\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t/* -------------------------------------------------- */\r\n\r\n\t\t\t// if this cell is the only one in the row that has this num as possible value,\r\n\t\t\t// this cell's possible values should only include this num but not the other nums\r\n\t\t\tfor (let row = 0; row < 9; row++) {\r\n\t\t\t\tconst numPossibleAnswers = newSudokuPossibleAnswerValues[row]\r\n\t\t\t\t\t.map((col) => col.includes(num))\r\n\t\t\t\t\t.map((v, c) => ({ col: c, possible: v }))\r\n\t\t\t\t\t.filter(({ possible }) => possible);\r\n\r\n\t\t\t\tif (numPossibleAnswers.length === 1) {\r\n\t\t\t\t\tnewSudokuPossibleAnswerValues = removeValuesInMultiDimensionalArray(\r\n\t\t\t\t\t\tnewSudokuPossibleAnswerValues,\r\n\t\t\t\t\t\tArray(9)\r\n\t\t\t\t\t\t\t.fill(null)\r\n\t\t\t\t\t\t\t.map((e, i) => i + 1)\r\n\t\t\t\t\t\t\t.filter((v) => v !== num),\r\n\t\t\t\t\t\trow,\r\n\t\t\t\t\t\tnumPossibleAnswers[0].col\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// if this cell is the only one in the col that has this num as possible value,\r\n\t\t\t// this cell's possible values should only include this num but not the other nums\r\n\t\t\tfor (let col = 0; col < 9; col++) {\r\n\t\t\t\tconst numPossibleAnswers = newSudokuPossibleAnswerValues\r\n\t\t\t\t\t.map((rowArr) => rowArr[col])\r\n\t\t\t\t\t.map((row) => row.includes(num))\r\n\t\t\t\t\t.map((v, r) => ({ row: r, possible: v }))\r\n\t\t\t\t\t.filter(({ possible }) => possible);\r\n\r\n\t\t\t\tif (numPossibleAnswers.length === 1) {\r\n\t\t\t\t\tnewSudokuPossibleAnswerValues = removeValuesInMultiDimensionalArray(\r\n\t\t\t\t\t\tnewSudokuPossibleAnswerValues,\r\n\t\t\t\t\t\tArray(9)\r\n\t\t\t\t\t\t\t.fill(null)\r\n\t\t\t\t\t\t\t.map((e, i) => i + 1)\r\n\t\t\t\t\t\t\t.filter((v) => v !== num),\r\n\t\t\t\t\t\tnumPossibleAnswers[0].row,\r\n\t\t\t\t\t\tcol\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// if this cell is the only one in the nonet that has this num as possible value,\r\n\t\t\t// this cell's possible values should only include this num but not the other nums\r\n\t\t\tfor (let nonet = 0; nonet < 9; nonet++) {\r\n\t\t\t\tconst numPossibleAnswers = getNonetPossibleAnswerValuesByNonetIndex(\r\n\t\t\t\t\tnewSudokuPossibleAnswerValues,\r\n\t\t\t\t\tnonet\r\n\t\t\t\t)\r\n\t\t\t\t\t.map(({ possibleAnswers, row, col }) => ({ possible: possibleAnswers.includes(num), row, col }))\r\n\t\t\t\t\t.filter(({ possible }) => possible);\r\n\r\n\t\t\t\tif (numPossibleAnswers.length === 1) {\r\n\t\t\t\t\tnewSudokuPossibleAnswerValues = removeValuesInMultiDimensionalArray(\r\n\t\t\t\t\t\tnewSudokuPossibleAnswerValues,\r\n\t\t\t\t\t\tArray(9)\r\n\t\t\t\t\t\t\t.fill(null)\r\n\t\t\t\t\t\t\t.map((e, i) => i + 1)\r\n\t\t\t\t\t\t\t.filter((v) => v !== num),\r\n\t\t\t\t\t\tnumPossibleAnswers[0].row,\r\n\t\t\t\t\t\tnumPossibleAnswers[0].col\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/* -------------------------------------------------- */\r\n\r\n\t\tconst eliminateOtherCellPossibleValuesWithCombinations = (possibleAnswerValues) => {\r\n\t\t\tconst combinations = CombinationUtils.powerSet(possibleAnswerValues).filter(\r\n\t\t\t\t(e) => e.length >= 2 && e.length <= 7\r\n\t\t\t);\r\n\r\n\t\t\tfor (const combination of combinations) {\r\n\t\t\t\tif (combination.length === possibleAnswerValues.length) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst possibleAnswers = Array.from(new Set(combination.flatMap((v) => v.possibleAnswers)));\r\n\t\t\t\tif (possibleAnswers.length !== combination.length) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (const otherCell of possibleAnswerValues) {\r\n\t\t\t\t\tif (combination.some((v) => v.row === otherCell.row && v.col === otherCell.col)) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tnewSudokuPossibleAnswerValues = removeValuesInMultiDimensionalArray(\r\n\t\t\t\t\t\tnewSudokuPossibleAnswerValues,\r\n\t\t\t\t\t\tpossibleAnswers,\r\n\t\t\t\t\t\totherCell.row,\r\n\t\t\t\t\t\totherCell.col\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// if the number of some cells' possible values in the row is equal to the number of these cells,\r\n\t\t// these values can only be in these cells and other cells in the same row should not have these possible values\r\n\t\tfor (let row = 0; row < 9; row++) {\r\n\t\t\tconst rowPossibleAnswerValues = getRowPossibleAnswerValuesByRow(newSudokuPossibleAnswerValues, row).filter(\r\n\t\t\t\t(v) => v.possibleAnswers.length > 0\r\n\t\t\t);\r\n\r\n\t\t\teliminateOtherCellPossibleValuesWithCombinations(rowPossibleAnswerValues);\r\n\t\t}\r\n\r\n\t\t// if the number of some cells' possible values in the col is equal to the number of these cells,\r\n\t\t// these values can only be in these cells and other cells in the same col should not have these possible values\r\n\t\tfor (let col = 0; col < 9; col++) {\r\n\t\t\tconst colPossibleAnswerValues = getColPossibleAnswerValuesByCol(newSudokuPossibleAnswerValues, col).filter(\r\n\t\t\t\t(v) => v.possibleAnswers.length > 0\r\n\t\t\t);\r\n\r\n\t\t\teliminateOtherCellPossibleValuesWithCombinations(colPossibleAnswerValues);\r\n\t\t}\r\n\r\n\t\t// if the number of some cells' possible values in the nonet is equal to the number of these cells,\r\n\t\t// these values can only be in these cells and other cells in the same nonet should not have these possible values\r\n\t\tfor (let nonet = 0; nonet < 9; nonet++) {\r\n\t\t\tconst nonetPossibleAnswerValues = getNonetPossibleAnswerValuesByNonetIndex(\r\n\t\t\t\tnewSudokuPossibleAnswerValues,\r\n\t\t\t\tnonet\r\n\t\t\t).filter((v) => v.possibleAnswers.length > 0);\r\n\r\n\t\t\teliminateOtherCellPossibleValuesWithCombinations(nonetPossibleAnswerValues);\r\n\t\t}\r\n\r\n\t\tsetSudokuPossibleAnswerCellValues(newSudokuPossibleAnswerValues);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<SudokuConfigForm configData={configData} setConfigData={setConfigData} />\r\n\r\n\t\t\t<SudokuActionSection\r\n\t\t\t\tclearQuestionAction={() => clearQuestionAction()}\r\n\t\t\t\tclearAnswerAction={() => clearAnswerAction()}\r\n\t\t\t/>\r\n\r\n\t\t\t<div style={{ display: \"inline-block\", margin: \"1em\", verticalAlign: \"top\" }}>\r\n\t\t\t\t<table id=\"sudoku-table\">\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{Array(9)\r\n\t\t\t\t\t\t\t.fill(null)\r\n\t\t\t\t\t\t\t.map((e, row) => (\r\n\t\t\t\t\t\t\t\t<tr key={row + 1}>\r\n\t\t\t\t\t\t\t\t\t{Array(9)\r\n\t\t\t\t\t\t\t\t\t\t.fill(null)\r\n\t\t\t\t\t\t\t\t\t\t.map((o, col) => (\r\n\t\t\t\t\t\t\t\t\t\t\t<DigitCell\r\n\t\t\t\t\t\t\t\t\t\t\t\tkey={row * 9 + col + 1}\r\n\t\t\t\t\t\t\t\t\t\t\t\tselected={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t(row === selectedRow && col === selectedCol) ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t(sudokuAnswerCellValues[row][col] &&\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsudokuAnswerCellValues[row][col] ===\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsudokuAnswerCellValues[selectedRow][selectedCol])\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\tanswer={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t!sudokuQuestionCellValues[row][col] &&\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t!!sudokuAnswerCellValues[row][col]\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\thighlighted={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\trow === selectedRow ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcol === selectedCol ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tgetNonetIndexByRowCol(row, col) ===\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tgetNonetIndexByRowCol(selectedRow, selectedCol)\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetselectedRow(row);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetselectedCol(col);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ position: \"relative\" }}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{sudokuQuestionCellValues[row][col] ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsudokuAnswerCellValues[row][col] || <>&nbsp;</>}\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tposition: \"absolute\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttop: \"-8px\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tleft: \"4px\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tzIndex: 1,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfontSize: \"8px\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfontWeight: \"normal\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: \"#90a4ae\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{sudokuPossibleAnswerCellValues[row][col].join(\"\")}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t</DigitCell>\r\n\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div style={{ display: \"inline-block\", margin: \"1em\", verticalAlign: \"top\" }}>\r\n\t\t\t\t<table id=\"digits-table\">\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{Array(3)\r\n\t\t\t\t\t\t\t.fill(null)\r\n\t\t\t\t\t\t\t.map((e, i) => (\r\n\t\t\t\t\t\t\t\t<tr key={i + 1}>\r\n\t\t\t\t\t\t\t\t\t{Array(3)\r\n\t\t\t\t\t\t\t\t\t\t.fill(null)\r\n\t\t\t\t\t\t\t\t\t\t.map((o, j) => i * 3 + j + 1)\r\n\t\t\t\t\t\t\t\t\t\t.map((v) => (\r\n\t\t\t\t\t\t\t\t\t\t\t<DigitCell\r\n\t\t\t\t\t\t\t\t\t\t\t\tkey={v}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconfigData.answerMode &&\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t!!sudokuQuestionCellValues[selectedRow][selectedCol]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetSudokuAnswerCellValues(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tgetNewMultiDimensionalArrayWithUpdatedValue(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsudokuAnswerCellValues,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv ===\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(sudokuQuestionCellValues[selectedRow][selectedCol] ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsudokuAnswerCellValues[selectedRow][selectedCol])\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? null\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: v,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectedRow,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectedCol\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (!configData.answerMode) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSudokuQuestionCellValues(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgetNewMultiDimensionalArrayWithUpdatedValue(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsudokuQuestionCellValues,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tv === sudokuQuestionCellValues[selectedRow][selectedCol]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? null\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: v,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectedRow,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectedCol\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{v}\r\n\t\t\t\t\t\t\t\t\t\t\t</DigitCell>\r\n\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div style={{ display: \"inline-block\", margin: \"1em\", verticalAlign: \"top\" }}>\r\n\t\t\t\t<pre>{JSON.stringify(configData, null, 4)}</pre>\r\n\t\t\t\t<pre>\r\n\t\t\t\t\tQuestion:\r\n\t\t\t\t\t{JSON.stringify(\r\n\t\t\t\t\t\tsudokuQuestionCellValues.map((e) => e.map((o) => (o ? o : \"_\")).join(\" \")),\r\n\t\t\t\t\t\tnull,\r\n\t\t\t\t\t\t4\r\n\t\t\t\t\t)}\r\n\t\t\t\t</pre>\r\n\t\t\t\t<pre>\r\n\t\t\t\t\tAnswer:\r\n\t\t\t\t\t{JSON.stringify(\r\n\t\t\t\t\t\tsudokuAnswerCellValues.map((e) => e.map((o) => (o ? o : \"_\")).join(\" \")),\r\n\t\t\t\t\t\tnull,\r\n\t\t\t\t\t\t4\r\n\t\t\t\t\t)}\r\n\t\t\t\t</pre>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default Sudoku;\r\nexport { Sudoku };\r\n","import \"./App.css\";\nimport Sudoku from \"./components/Sudoku\";\n\nfunction App() {\n\treturn (\n\t\t<div style={{ padding: \"5em\" }}>\n\t\t\t<Sudoku />\n\t\t</div>\n\t);\n}\n\nexport default App;\nexport { App };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}